// <auto-generated />
using System;
using ASPdotNETCoreWebAPIUserSignupLoginVerified.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ASPdotNETCoreWebAPIUserSignupLoginVerified.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220728054952_ThirdMigration")]
    partial class ThirdMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.7");

            modelBuilder.Entity("ASPdotNETCoreWebAPIUserSignupLoginVerified.Models.Post", b =>
                {
                    b.Property<int>("IssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssignedTo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100000)
                        .HasColumnType("TEXT");

                    b.Property<string>("IssueType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Project")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReportDate")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReportedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("IssueId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            IssueId = 1,
                            AssignedTo = "User 1",
                            Description = "When searching for a customer 1 site using our new API, not seeing the name. Example JSON follows...",
                            IssueType = "minor",
                            Project = "Web app bug tracking",
                            ReportDate = "11-2-2022",
                            ReportedBy = "Admin",
                            Status = "ongoing",
                            Summary = "Bad JSON data coming back from API on port8081"
                        },
                        new
                        {
                            IssueId = 2,
                            AssignedTo = "User 2",
                            Description = "When searching for a customer 2 site using our new API, not seeing the name. Example JSON follows...",
                            IssueType = "minor",
                            Project = "Web app bug tracking",
                            ReportDate = "12-3-2022",
                            ReportedBy = "Admin",
                            Status = "ongoing",
                            Summary = "Bad JSON data coming back from API on port8082"
                        },
                        new
                        {
                            IssueId = 3,
                            AssignedTo = "User 3",
                            Description = "When searching for a customer 3 site using our new API, not seeing the name. Example JSON follows...",
                            IssueType = "minor",
                            Project = "Web app bug tracking",
                            ReportDate = "13-4-2022",
                            ReportedBy = "Admin",
                            Status = "ongoing",
                            Summary = "Bad JSON data coming back from API on port8083"
                        },
                        new
                        {
                            IssueId = 4,
                            AssignedTo = "User 4",
                            Description = "When searching for a customer 4 site using our new API, not seeing the name. Example JSON follows...",
                            IssueType = "minor",
                            Project = "Web app bug tracking",
                            ReportDate = "14-5-2022",
                            ReportedBy = "Admin",
                            Status = "ongoing",
                            Summary = "Bad JSON data coming back from API on port8084"
                        },
                        new
                        {
                            IssueId = 5,
                            AssignedTo = "User 5",
                            Description = "When searching for a customer 5 site using our new API, not seeing the name. Example JSON follows...",
                            IssueType = "minor",
                            Project = "Web app bug tracking",
                            ReportDate = "15-6-2022",
                            ReportedBy = "Admin",
                            Status = "ongoing",
                            Summary = "Bad JSON data coming back from API on port8085"
                        },
                        new
                        {
                            IssueId = 6,
                            AssignedTo = "User 6",
                            Description = "When searching for a customer 6 site using our new API, not seeing the name. Example JSON follows...",
                            IssueType = "minor",
                            Project = "Web app bug tracking",
                            ReportDate = "16-7-2022",
                            ReportedBy = "Admin",
                            Status = "ongoing",
                            Summary = "Bad JSON data coming back from API on port8086"
                        });
                });

            modelBuilder.Entity("ASPdotNETCoreWebAPIUserSignupLoginVerified.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("TEXT");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@mail.com",
                            PasswordHash = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            PasswordSalt = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
                        },
                        new
                        {
                            Id = 2,
                            Email = "general@mail.com",
                            PasswordHash = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            PasswordSalt = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
                        },
                        new
                        {
                            Id = 3,
                            Email = "captain@mail.com",
                            PasswordHash = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            PasswordSalt = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
